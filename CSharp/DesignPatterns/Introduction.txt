What is a Design Pattern?
 - General, reusable solution to a commonly occuring [code design] problem with a givin context

Why should I learn design patterns?
 - Avoid reinventing the wheel..
 - Improve communication "lingo"
 - Deliver better software.
 - Advance your career.

How should I learn design patterns?
 Stages of learning:
  1 - Ignorance
  2 - Awakening (design patterns aware - but not should about when and how to apply them)
  3 - Overzealous
  4 - Mastery (Applied and Internalize the patterns. Also recognize when to use a pattern)
 T-Shapred approach:
  - Breadth of Patterns (reach "Awakening" level for a large number of patterns, but make sure to "Master" the patterns that you would
		commonly use).

What Makes Up a Design Pattern?
 - Name and Classification
 - Intent
 - Also Known As
 - Motivation or Scenario
 - Applicability or Context
 - Structure (UML)
 - Participants (Objects, Classes)
 - Collaboration

When I should apply a design pattern?

Common Patterns to learn?